# You should know that Docker Compose works with services.
# 1 service = 1 container.
# For example, a service, a server, a client, a database...
# We use the keyword 'services' to start to create services.
services:
  # The name of our service is "database"
  # but you can use the name of your choice.
  # Note: This may change the commands you are going to use a little bit.
  database:
    # Official Postgres image from DockerHub (we use the last version)
    image: 'postgres:latest'

    # By default, a Postgres database is running on the 5432 port.
    # If we want to access the database from our computer (outside the container),
    # we must share the port with our computer's port.
    # The syntax is [port we want on our machine]:[port we want to retrieve in the container]
    # Note: You are free to change your computer's port,
    # but take into consideration that it will change the way
    # you are connecting to your database.
    ports:
      - 5432:5432

    env_file:
      - .env # The name of your environment file (the one at the repository root)

    restart: unless-stopped
    volumes:
    # Giving it an initialisation script to run on startup
    # Should create tables if they don't exist
    - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    # In this example, we share the folder `db-data` in our root repository, with the default PostgreSQL data path
    # It means that every time the repository is modifying the data inside
    # of `/var/lib/postgresql/data/`, automatically the change will appear in `db-data`
    # You don't need to create the `db-data` folder. Docker Compose will do it for you
    - ./db-data/:/var/lib/postgresql/data/

# Adds pgadmin to localhost. Can be accessed at localhost:15433 and logged in with
# credentials defined in .env file
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "5050:80"
    env_file:
      - .env
    depends_on:
      - database
    volumes:
      - "./pgadmin-data/:/var/lib/pgadmin/"